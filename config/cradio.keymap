// Copyright (c) 2022 The ZMK Contributors
// SPDX-License-Identifier: MIT

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

// Define layers

#define LAYER_ALPHA 0
#define LAYER_NUMBSYM 1
#define LAYER_FUNCTION 2
#define LAYER_APPCONTROL 3

// Define positions for combos

#define	qk	0
#define	wk	1
#define	ek	2
#define	rk	3
#define	tk	4
#define	yk	5
#define	uk	6
#define	ik	7
#define	ok	8
#define	pk	9
#define	ak	10
#define	sk	11
#define	dk	12
#define	fk	13
#define	gk	14
#define	hk	15
#define	jk	16
#define	kk	17
#define	lk	18
#define	semik	19
#define	zk	20
#define	xk	21
#define	ck	22
#define	vk	23
#define	bk	24
#define	nk	25
#define	mk	26
#define	commak	27
#define	periodk	28
#define	slashk	29
#define	tabk	30
#define	spacek	31
#define	enterk	32
#define	backspk	33


&caps_word {
    continue-list = <BACKSPACE DELETE>;
};

/ {
    combos {
        compatible = "zmk,combos";

        // Characters
		
        combo_doublequ {
            timeout-ms = <50>;
            key-positions = <dk fk>;
            bindings = <&kp DQT>;
        };
		combo_singlequ {
            timeout-ms = <50>;
            key-positions = <jk kk>;
            bindings = <&kp SQT>;
        };
		combo_lpar {
            timeout-ms = <50>;
            key-positions = <ck vk>;
            bindings = <&kp LPAR>;
        };
		combo_rpar {
            timeout-ms = <50>;
            key-positions = <mk commak>;
            bindings = <&kp RPAR>;
        };
		combo_lbrace {
            timeout-ms = <50>;
            key-positions = <xk ck vk>;
            bindings = <&kp LBKT>;
        };
		combo_rbrace {
            timeout-ms = <50>;
            key-positions = <mk commak periodk>;
            bindings = <&kp RBKT>;
        };
		combo_lcurly {
            timeout-ms = <50>;
            key-positions = <xk vk>;
            bindings = <&kp LBRC>;
        };
		combo_rcurly {
            timeout-ms = <50>;
            key-positions = <mk periodk>;
            bindings = <&kp RBRC>;
        };
        
        // Layer combos
        
        combo_alpha {
            timeout-ms = <200>;
            key-positions = <jk kk lk>;
            bindings = <&to LAYER_ALPHA>;
        };
        combo_numbsym {
            timeout-ms = <200>;
            key-positions = <hk jk kk>;
            bindings = <&to LAYER_NUMBSYM>;
        };
        combo_numbsymosl {
            timeout-ms = <200>;
            key-positions = <hk kk>;
            bindings = <&sl LAYER_NUMBSYM>;
        };
        combo_func {
            timeout-ms = <200>;
            key-positions = <nk mk commak>;
            bindings = <&to LAYER_FUNCTION>;
        };
        combo_funcosl {
            timeout-ms = <200>;
            key-positions = <nk commak>;
            bindings = <&sl LAYER_FUNCTION>;
        };
        combo_apps {
            timeout-ms = <200>;
            key-positions = <yk uk ik>;
            bindings = <&to LAYER_APPCONTROL>;
        };
        combo_appsosl {
            timeout-ms = <200>;
            key-positions = <yk ik>;
            bindings = <&sl LAYER_APPCONTROL>;
        };

        // Behavioral

        combo_esc {
            timeout-ms = <100>;
            key-positions = <fk gk>;
            bindings = <&kp ESC>;
        };
		combo_winclose {
            timeout-ms = <300>;
            key-positions = <rk tk>;
            bindings = <&kp LC(F4)>;
        };
		combo_appclose {
            timeout-ms = <300>;
            key-positions = <vk bk>;
            bindings = <&kp LA(F4)>;
        };
		combo_caplock {
            timeout-ms = <200>;
            key-positions = <ck vk bk>;
            bindings = <&kp CAPS>;
        };
		combo_capsword {
            timeout-ms = <200>;
            key-positions = <ck bk>;
            bindings = <&caps_word>;
        };
		combo_del {
            timeout-ms = <200>;
            key-positions = <dk gk>;
            bindings = <&kp DEL>;
        };
		combo_ins {
            timeout-ms = <300>;
            key-positions = <ck bk>;
            bindings = <&kp INS>;
        };
		combo_leftarr {
            timeout-ms = <100>;
            key-positions = <dk fk gk>;
            bindings = <&kp LEFT>;
        };
		combo_rightarr {
            timeout-ms = <100>;
            key-positions = <ek rk tk>;
            bindings = <&kp RIGHT>;
        };
		combo_uparr {
            timeout-ms = <100>;
            key-positions = <wk ek rk>;
            bindings = <&kp UP>;
        };
		combo_dnarr {
            timeout-ms = <100>;
            key-positions = <sk dk fk>;
            bindings = <&kp DOWN>;
        };
		combo_pgup {
            timeout-ms = <100>;
            key-positions = <fk jk>;
            bindings = <&kp PG_UP>;
        };
		combo_pgdn {
            timeout-ms = <100>;
            key-positions = <vk mk>;
            bindings = <&kp PG_DN>;
        };
		combo_home {
            timeout-ms = <100>;
            key-positions = <gk hk>;
            bindings = <&kp HOME>;
        };
		combo_end {
            timeout-ms = <100>;
            key-positions = <bk nk>;
            bindings = <&kp END>;
        };
    };
};

/ {
    behaviors {
        ht: hold_tap {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <250>;
            quick-tap-ms = <150>;
            require-prior-idle-ms = <100>;
            bindings = <&kp>, <&kp>;
        };
        pt: hold_tap_permissive {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <220>;
            quick-tap-ms = <150>;
            bindings = <&kp>, <&kp>;
        };
    };

    keymap {
        compatible = "zmk,keymap";
alpha_layer {
bindings = <
    &kp Q  &kp W  &ht LS(LC(LA(LGUI))) E  &ht LC(LALT) R &ht LGUI T           &ht RGUI Y       &ht RC(RALT) U &ht RS(RC(RA(RGUI))) I  &kp O    &kp P
    &kp A  &kp S  &ht LC(LA(LSHIFT)) D    &ht LCTRL F    &ht LC(LSHIFT) G     &ht RC(RSHIFT) H &ht RCTRL J    &ht RC(RA(RSHIFT)) K    &kp L    &kp SEMI
    &kp Z  &kp X  &kp C                   &ht LALT V     &ht LS(LALT) B       &ht LS(LALT) N   &ht RALT M     &kp COMMA               &kp DOT  &kp FSLH
                                          &kp TAB        &pt LSHIFT SPACE     &pt RSHIFT ENTER &kp BSPC
            >;
        };

numbsym_layer {
bindings = <
  //│ !        │  @       │  #       │  $       │  %     │   │ ^        │ &        │ *        │ (        │  )       │
    &kp EXCL   &kp AT     &kp HASH   &kp DLLR   &kp PRCNT     &kp CARET  &kp AMPS   &kp ASTRK  &kp LPAR   &kp RPAR
    &kp N1     &kp N2     &kp N3     &kp N4     &kp N5        &kp N6     &kp N7     &kp N8     &kp N9     &kp N0
  //│ ` ~      │   \  |   │  = +     │  -       │  _     │   │  ' "     │  ; :     │ , <      │   . >    │   / ?    │
    &kp GRAVE  &kp BSLH   &kp EQUAL  &kp MINUS  &kp UNDER     &kp SQT    &kp SEMI   &kp COMMA  &kp DOT    &kp SLASH
                                     &trans     &trans        &trans     &trans
            >;
        };

function_layer {
bindings = <
    &kp C_PLAY      &kp C_STOP &kp C_NEXT &kp C_AC_BACK  &kp F11              &kp F12             &kp C_MUTE  &kp K_VOL_UP  &kp C_VOL_DN  &kp RG(L)
    &kp F1          &kp F2     &kp F3     &kp F4         &kp F5               &kp F6              &kp F7      &kp F8        &kp F9        &kp F10
    &kp LC(LA(DEL)) &kp LGUI   &kp LALT   &kp LCTRL      &kp LC(LA(LSHIFT))   &kp RC(RA(RSHIFT))  &kp RCTRL   &kp RALT      &kp RGUI      &kp LC(LA(DEL))
                                          &trans         &trans               &trans              &trans
            >;
        };

appcontrol_layer {
bindings = <
     &bt BT_CLR  &bt BT_SEL 0 &kp LS(LC(LA(LG(L))))  &kp LS(LC(LA(LG(O))))  &kp LS(LC(LA(LG(T))))    &kp LG(E)      &kp C_BRI_UP    &kp C_BRI_DN         &bt BT_SEL 0 &bt BT_CLR
     &bootloader &bt BT_SEL 1 &kp C_AL_CONTROL_PANEL &kp LS(LC(LA(LG(P))))  &kp LS(LC(LA(LG(W))))    &kp C_AL_CALC  &kp RC(RS(ESC)) &kp LG(R)            &bt BT_SEL 1 &bootloader
     &sys_reset  &bt BT_SEL 2 &kp C_AL_WWW           &kp LG(DOT)            &kp LS(LC(LA(LG(X))))    &kp LS(LG(S))  &kp LG(V)       &kp C_MEDIA_COMPUTER &bt BT_SEL 2 &sys_reset
                                                     &trans                 &trans                   &trans         &trans
            >;
        };

    };
};
