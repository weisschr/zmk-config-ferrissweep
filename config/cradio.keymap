// Copyright (c) 2022 The ZMK Contributors
// SPDX-License-Identifier: MIT

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/mouse.h>

// Define layers

#define LAYER_ALPHA 0
#define LAYER_NUMBSYM 1
#define LAYER_FUNCTION 2
#define LAYER_MOUSE 3
#define LAYER_APPCONTROL 4

// Define positions for combos

#define qk 1
#define wk 2
#define ek 3
#define rk 4
#define tk 5
#define yk 6
#define uk 7
#define ik 8
#define ok 9
#define pk 10
#define ak 11
#define sk 12
#define dk 13
#define fk 14
#define gk 15
#define hk 16
#define jk 17
#define kk 18
#define lk 19
#define semik 20
#define zk 21
#define xk 22
#define ck 23
#define vk 24
#define bk 25
#define nk 26
#define mk 27
#define commak 28
#define periodk 29
#define slashk 30
#define tabk 31
#define spacek 32
#define enterk 33
#define backspk 34

/*
&caps_word {
    continue-list = <BACKSPACE DELETE>;
};
*/

/ {
    combos {
        compatible = "zmk,combos";

        // Characters
		
        combo_doublequ {
            timeout-ms = <50>;
            key-positions = <dk fk>;
            bindings = <&kp DQT>;
        };
		combo_singlequ {
            timeout-ms = <50>;
            key-positions = <jk kk>;
            bindings = <&kp SQT>;
        };
		combo_lpar {
            timeout-ms = <50>;
            key-positions = <ok rk>;
            bindings = <&kp LPAR>;
        };
		combo_rpar {
            timeout-ms = <50>;
            key-positions = <pk tk>;
            bindings = <&kp RPAR>;
        };
		combo_lbrace {
            timeout-ms = <50>;
            key-positions = <xk ck vk>;
            bindings = <&kp LBKT>;
        };
		combo_rbrace {
            timeout-ms = <50>;
            key-positions = <mk commak periodk>;
            bindings = <&kp RBKT>;
        };
		combo_lcurly {
            timeout-ms = <50>;
            key-positions = <xk vk>;
            bindings = <&kp LBRC>;
        };
		combo_rcurly {
            timeout-ms = <50>;
            key-positions = <mk periodk>;
            bindings = <&kp RBRC>;
        };
        
        // Layer combos
        
        combo_alpha {
            timeout-ms = <50>;
            key-positions = <jk kk lk>;
            bindings = <&to LAYER_ALPHA>;
        };
        combo_mouse {
            timeout-ms = <50>;
            key-positions = <uk ik ok>;
            bindings = <&to LAYER_MOUSE>;
        };
        combo_numbsym {
            timeout-ms = <50>;
            key-positions = <hk jk kk>;
            bindings = <&to LAYER_NUMBSYM>;
        };
        combo_numbsymosl {
            timeout-ms = <50>;
            key-positions = <hk kk>;
            bindings = <&sl LAYER_NUMBSYM>;
        };
        combo_apps {
            timeout-ms = <50>;
            key-positions = <yk uk ik>;
            bindings = <&to LAYER_APPCONTROL>;
        };
        combo_appsosl {
            timeout-ms = <50>;
            key-positions = <yk ik>;
            bindings = <&sl LAYER_APPCONTROL>;
        };

        // Behavioral

        combo_esc {
            timeout-ms = <50>;
            key-positions = <fk gk>;
            bindings = <&kp ESC>;
        };
		combo_winclose {
            timeout-ms = <50>;
            key-positions = <rk tk>;
            bindings = <&kp LC(F4)>;
        };
		combo_appclose {
            timeout-ms = <50>;
            key-positions = <vk bk>;
            bindings = <&kp LA(F4)>;
        };
		combo_caplock {
            timeout-ms = <50>;
            key-positions = <ck vk bk>;
            bindings = <&kp LCAPS>;
        };
		combo_capsword {
            timeout-ms = <50>;
            key-positions = <ck bk>;
            bindings = <&caps_word>;
        };
		combo_del {
            timeout-ms = <50>;
            key-positions = <dk gk>;
            bindings = <&kp DEL>;
        };
		combo_ins {
            timeout-ms = <50>;
            key-positions = <ck bk>;
            bindings = <&kp INS>;
        };
		combo_leftarr {
            timeout-ms = <50>;
            key-positions = <dk fk gk>;
            bindings = <&kp LEFT>;
        };
		combo_rightarr {
            timeout-ms = <50>;
            key-positions = <ek rk tk>;
            bindings = <&kp RIGHT>;
        };
		combo_uparr {
            timeout-ms = <50>;
            key-positions = <wk ek rk>;
            bindings = <&kp UP>;
        };
		combo_dnarr {
            timeout-ms = <50>;
            key-positions = <sk dk fk>;
            bindings = <&kp DOWN>;
        };
		combo_pgup {
            timeout-ms = <50>;
            key-positions = <fk jk>;
            bindings = <&kp PG_UP>;
        };
		combo_pgdn {
            timeout-ms = <50>;
            key-positions = <vk mk>;
            bindings = <&kp PG_DN>;
        };
		combo_home {
            timeout-ms = <50>;
            key-positions = <gk hk>;
            bindings = <&kp HOME>;
        };
		combo_end {
            timeout-ms = <50>;
            key-positions = <bk nk>;
            bindings = <&kp END>;
        };
    };
};

/ {
    behaviors {
        ht: hold_tap {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <220>;
            quick-tap-ms = <150>;
            require-prior-idle-ms = <100>;
            bindings = <&kp>, <&kp>;
        };
        pt: hold_tap_permissive {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <220>;
            quick-tap-ms = <150>;
            bindings = <&kp>, <&kp>;
        };
    };

    keymap {
        compatible = "zmk,keymap";    
alpha_layer {
            bindings = <
          &kp Q  &kp W  &ht LS(LC(LA(LGUI))) E  &ht LC(LALT) R &ht LGUI T           &ht RGUI Y       &ht RC(RALT) U &ht RS(RC(RA(RGUI))) I  &kp O    &kp P
          &kp A  &kp S  &ht LC(LA(LSHIFT)) D    &ht LCTRL F    &ht LC(LSHIFT) G     &ht RC(RSHIFT) H &ht RCTRL J    &ht RC(RA(RSHIFT)) K    &kp L    &kp SEMI
          &kp Z  &kp X  &kp C                   &ht LALT V     &ht LS(LALT) B       &ht LS(LALT) N   &ht RALT M     &kp COMMA               &kp DOT  &kp FSLH
                                                &kp TAB        &pt LSHIFT SPACE     &pt RSHIFT ENTER &kp BSPC
            >;
        };

        numbsym_layer {
            bindings = <
        //│ !        │  @       │  #       │  $       │  %       │   │ ^        │ &        │ *        │ (        │  )       │
            &kp EXCL   &kp AT     &kp HASH   &kp DLLR   &kp PRCNT     &kp CARET  &kp AMPS   &kp ASTRK  &kp LPAR   &kp RPAR
            &kp N1     &kp N2     &kp N3     &kp N4     &kp N5        &kp N6     &kp N7     &kp N8     &kp N9     &kp N0
        //│ ` ~      │   \  |   │  = +     │  -       │  _       │   │  ' "     │  ; :     │ , <      │   . >    │   / ?    │
           &kp GRAVE  &kp BSLH   &kp EQUAL  &kp MINUS  &kp UNDER       &kp SQT   &kp SEMI   &kp COMMA  &kp DOT    &kp SLASH
                                             &trans     &trans        &trans     &trans
            >;
        };

        function_layer {
            bindings = <
            &none     &none      &none      &kp LC(LA(DEL))  &kp F11              &kp F12             &none     &none     &none      &none
            &kp F1    &kp F2     &kp F3     &kp F4           &kp F5               &kp F6              &kp F7    &kp F8    &kp F9     &kp F10
            &none     &kp LGUI   &kp LALT   &kp LCTRL        &kp LC(LA(LSHIFT))   &kp RC(RA(RSHIFT))  &kp RCTRL &kp RALT  &kp RGUI   &none
                                            &trans           &trans               &trans              &trans
            >;
        };

appcontrol_layer {
            bindings = <
     &bt BT_CLR &bt BT_SEL 0 &none &none  &none    &none  &bootloader  &sys_reset  &none   &none
     &none      &bt BT_SEL 1 &none &none  &none    &none  &none        &none       &none   &none
     &none      &bt BT_SEL 2 &none &none  &none    &none  &none        &none       &none   &none
                                   &trans &trans   &trans &trans
            >;
        };

    };
};
